{
  "stats": {
    "suites": 5,
    "tests": 10,
    "passes": 9,
    "pending": 0,
    "failures": 1,
    "start": "2023-02-09T13:51:01.777Z",
    "end": "2023-02-09T13:51:05.645Z",
    "duration": 3868,
    "testsRegistered": 10,
    "passPercent": 90,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ce0676c9-d913-4800-a287-423cc5de5476",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "23627b16-57c3-424b-a09f-a1e275969b8c",
          "title": "POST/Category",
          "fullFile": "C:\\Users\\User\\apiAutomationSanber\\test\\categories.js",
          "file": "\\test\\categories.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "POST/Category with valid data",
              "fullTitle": "POST/Category POST/Category with valid data",
              "timedOut": false,
              "duration": 456,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request(baseurl)\n.post('/categories')\n.set( \"Authorization\", \"Bearer \" + token )\n.send(validData)\n.then(async(response) => {\n    expect((await response).status).to.equal(201)\n    expect((await response).body.status).to.equal(\"success\")\n    expect((await response).body.message).to.equal(\"Category berhasil ditambahkan\")\n})",
              "err": {},
              "uuid": "6bfe42bf-2a2c-4be5-8e98-e51e1d0bc22f",
              "parentUUID": "23627b16-57c3-424b-a09f-a1e275969b8c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST/Category with invalid data",
              "fullTitle": "POST/Category POST/Category with invalid data",
              "timedOut": false,
              "duration": 116,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request(baseurl)\n.post('/categories')\n.set( \"Authorization\", \"Bearer \" + token )\n.send(invalidData)\n.then(async(response) => {\n    expect((await response).status).to.equal(400)\n    expect((await response).body.status).to.equal(\"fail\")\n    expect((await response).body.message).to.equal(\"\\\"name\\\" is not allowed to be empty\")\n})",
              "err": {},
              "uuid": "1ac8c58e-9111-4c44-81ad-71d6287b81ad",
              "parentUUID": "23627b16-57c3-424b-a09f-a1e275969b8c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6bfe42bf-2a2c-4be5-8e98-e51e1d0bc22f",
            "1ac8c58e-9111-4c44-81ad-71d6287b81ad"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 572,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "090b2e78-952f-4913-b58d-be523361d60e",
          "title": "GET/Category",
          "fullFile": "C:\\Users\\User\\apiAutomationSanber\\test\\categories.js",
          "file": "\\test\\categories.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET/Category page 1",
              "fullTitle": "GET/Category GET/Category page 1",
              "timedOut": false,
              "duration": 138,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request(baseurl)\n.get('/customers?page=1')\n.set( \"Authorization\", \"Bearer \" + token )\n.then(async(response) => {\n    console.log(response.body)\n    expect((await response).status).to.equal(200)\n    expect((await response).body.status).to.equal(\"success\")\n    expect((await response).body.data).to.be.an('object')\n})",
              "err": {},
              "uuid": "a9602366-78c0-4dd8-b64f-df56a103cebc",
              "parentUUID": "090b2e78-952f-4913-b58d-be523361d60e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET/Category with invalid token",
              "fullTitle": "GET/Category GET/Category with invalid token",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request(baseurl)\n.get('/customers?page=1')\n.set( \"Authorization\", \"Bearer \" + invalidToken )\n.then(async(response) => {\n    expect((await response).status).to.equal(401)\n    expect((await response).body.error).to.equal(\"Unauthorized\")\n    expect((await response).body.message).to.equal(\"Invalid token structure\")\n})",
              "err": {},
              "uuid": "adfc0822-2529-4b03-b64c-348fdc2288dd",
              "parentUUID": "090b2e78-952f-4913-b58d-be523361d60e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a9602366-78c0-4dd8-b64f-df56a103cebc",
            "adfc0822-2529-4b03-b64c-348fdc2288dd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 253,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a9b2c02f-f52c-469b-809b-4c1a91434e87",
          "title": "GET/Category by id",
          "fullFile": "C:\\Users\\User\\apiAutomationSanber\\test\\categories.js",
          "file": "\\test\\categories.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET/Category with valid id",
              "fullTitle": "GET/Category by id GET/Category with valid id",
              "timedOut": false,
              "duration": 145,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request(baseurl)\n.get('/categories/'+ forGet)\n.set( \"Authorization\", \"Bearer \" + token )\n.then(async(response) => {\n    expect((await response).status).to.equal(200)\n    expect((await response).body.status).to.equal(\"success\")\n    expect((await response).body.data.category.name).to.equal('Umum')\n})",
              "err": {},
              "uuid": "dfd6d6c3-1073-4e13-9667-0ca55b50bfbf",
              "parentUUID": "a9b2c02f-f52c-469b-809b-4c1a91434e87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET/Category with invalid id",
              "fullTitle": "GET/Category by id GET/Category with invalid id",
              "timedOut": true,
              "duration": 2011,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "return request(baseurl)\n.get('/categories/cd866e23-dc7f-4b2d-be0f-345e6ba23b0')\n.set( \"Authorization\", \"Bearer \" + token )\n.then(async(response) => {\n    expect((await response).status).to.equal(404)\n    expect((await response).body.status).to.equal(\"fail\")\n    expect((await response).body.message).to.equal(\"id tidak valid\")\n})",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\User\\apiAutomationSanber\\test\\categories.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\User\\apiAutomationSanber\\test\\categories.js)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "18989170-e268-421f-bfc2-a8f34b1e23fd",
              "parentUUID": "a9b2c02f-f52c-469b-809b-4c1a91434e87",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dfd6d6c3-1073-4e13-9667-0ca55b50bfbf"
          ],
          "failures": [
            "18989170-e268-421f-bfc2-a8f34b1e23fd"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2156,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "79d4a51e-041f-47d1-a21e-2afbe749acd0",
          "title": "PUT/Category",
          "fullFile": "C:\\Users\\User\\apiAutomationSanber\\test\\categories.js",
          "file": "\\test\\categories.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "PUT/Category with valid data",
              "fullTitle": "PUT/Category PUT/Category with valid data",
              "timedOut": false,
              "duration": 160,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request(baseurl)\n.put('/categories/'+ forPut)\n.set( \"Authorization\", \"Bearer \" + token )\n.send({\n    \"name\": \"test update\",\n    \"description\": \"test update\"\n})\n.then(async(response) => {\n    expect((await response).status).to.equal(200)\n    expect((await response).body.status).to.equal(\"success\")\n    expect((await response).body.data.name).to.equal(\"test update\")\n})",
              "err": {},
              "uuid": "bc18309b-91d6-4f1b-9104-b38f06700d8f",
              "parentUUID": "79d4a51e-041f-47d1-a21e-2afbe749acd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT/Category with invalid token",
              "fullTitle": "PUT/Category PUT/Category with invalid token",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request(baseurl)\n.put('/categories/'+ forPut)\n.set( \"Authorization\", \"Bearer \" + invalidToken )\n.send(invalidData)\n.then(async(response) => {\n    expect((await response).status).to.equal(401)\n    expect((await response).body.error).to.equal(\"Unauthorized\")\n    expect((await response).body.message).to.equal(\"Invalid token structure\")\n})",
              "err": {},
              "uuid": "f22babf7-f1ad-4e58-ab8c-10ef142601f4",
              "parentUUID": "79d4a51e-041f-47d1-a21e-2afbe749acd0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bc18309b-91d6-4f1b-9104-b38f06700d8f",
            "f22babf7-f1ad-4e58-ab8c-10ef142601f4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 377,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d7804a5a-d617-4577-9aec-18c9094a7501",
          "title": "DELETE/Category",
          "fullFile": "C:\\Users\\User\\apiAutomationSanber\\test\\categories.js",
          "file": "\\test\\categories.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "DELETE/Category with valid id",
              "fullTitle": "DELETE/Category DELETE/Category with valid id",
              "timedOut": false,
              "duration": 289,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request(baseurl)\n.get('/categories/'+ forDelete)\n.set( \"Authorization\", \"Bearer \" + token )\n.then(async(response) => {\n    expect((await response).status).to.equal(200)\n    expect((await response).body.status).to.equal(\"success\")\n    expect((await response).body.data).to.be.an('object')\n})",
              "err": {},
              "uuid": "d44ec0ad-1282-48e3-9392-cc2ae180f1e4",
              "parentUUID": "d7804a5a-d617-4577-9aec-18c9094a7501",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE/Category with invalid id",
              "fullTitle": "DELETE/Category DELETE/Category with invalid id",
              "timedOut": false,
              "duration": 135,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request(baseurl)\n.get('/categories/cd866e23-dc7f-4b2d-be0f-345e6ba23b')\n.set( \"Authorization\", \"Bearer \" + token )\n.then(async(response) => {\n    expect((await response).status).to.equal(404)\n    expect((await response).body.status).to.equal(\"fail\")\n    expect((await response).body.message).to.equal(\"id tidak valid\")\n})",
              "err": {},
              "uuid": "d9ec1869-ac19-4231-b298-8998c040a605",
              "parentUUID": "d7804a5a-d617-4577-9aec-18c9094a7501",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d44ec0ad-1282-48e3-9392-cc2ae180f1e4",
            "d9ec1869-ac19-4231-b298-8998c040a605"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 424,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}