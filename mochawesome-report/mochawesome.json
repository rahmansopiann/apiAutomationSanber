{
  "stats": {
    "suites": 5,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2023-02-09T13:56:23.192Z",
    "end": "2023-02-09T13:56:26.246Z",
    "duration": 3054,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "377e4702-7d12-418f-8826-c44253ae049c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "94598e09-cc64-4787-a0c6-3db99c7f64f2",
          "title": "POST/Category",
          "fullFile": "C:\\Users\\User\\apiAutomationSanber\\test\\categories.js",
          "file": "\\test\\categories.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "POST/Category with valid data",
              "fullTitle": "POST/Category POST/Category with valid data",
              "timedOut": false,
              "duration": 867,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request(baseurl)\n.post('/categories')\n.set( \"Authorization\", \"Bearer \" + token )\n.send(validData)\n.then(async(response) => {\n    expect((await response).status).to.equal(201)\n    expect((await response).body.status).to.equal(\"success\")\n    expect((await response).body.message).to.equal(\"Category berhasil ditambahkan\")\n})",
              "err": {},
              "uuid": "25ec85ef-f8f4-4f0c-ad5f-ba4216de0570",
              "parentUUID": "94598e09-cc64-4787-a0c6-3db99c7f64f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST/Category with invalid data",
              "fullTitle": "POST/Category POST/Category with invalid data",
              "timedOut": false,
              "duration": 225,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request(baseurl)\n.post('/categories')\n.set( \"Authorization\", \"Bearer \" + token )\n.send(invalidData)\n.then(async(response) => {\n    expect((await response).status).to.equal(400)\n    expect((await response).body.status).to.equal(\"fail\")\n    expect((await response).body.message).to.equal(\"\\\"name\\\" is not allowed to be empty\")\n})",
              "err": {},
              "uuid": "b423e8c8-34d1-4a46-9249-90954ad15b70",
              "parentUUID": "94598e09-cc64-4787-a0c6-3db99c7f64f2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "25ec85ef-f8f4-4f0c-ad5f-ba4216de0570",
            "b423e8c8-34d1-4a46-9249-90954ad15b70"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1092,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8e4bdc14-10f2-41ce-9749-37e261d83926",
          "title": "GET/Category",
          "fullFile": "C:\\Users\\User\\apiAutomationSanber\\test\\categories.js",
          "file": "\\test\\categories.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET/Category page 1",
              "fullTitle": "GET/Category GET/Category page 1",
              "timedOut": false,
              "duration": 254,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request(baseurl)\n.get('/customers?page=1')\n.set( \"Authorization\", \"Bearer \" + token )\n.then(async(response) => {\n    expect((await response).status).to.equal(200)\n    expect((await response).body.status).to.equal(\"success\")\n    expect((await response).body.data).to.be.an('object')\n})",
              "err": {},
              "uuid": "47770e8b-b394-4edc-a188-e4917f6cec19",
              "parentUUID": "8e4bdc14-10f2-41ce-9749-37e261d83926",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET/Category with invalid token",
              "fullTitle": "GET/Category GET/Category with invalid token",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request(baseurl)\n.get('/customers?page=1')\n.set( \"Authorization\", \"Bearer \" + invalidToken )\n.then(async(response) => {\n    expect((await response).status).to.equal(401)\n    expect((await response).body.error).to.equal(\"Unauthorized\")\n    expect((await response).body.message).to.equal(\"Invalid token structure\")\n})",
              "err": {},
              "uuid": "6e8550ce-e0f2-4772-a8b2-731c99979afa",
              "parentUUID": "8e4bdc14-10f2-41ce-9749-37e261d83926",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "47770e8b-b394-4edc-a188-e4917f6cec19",
            "6e8550ce-e0f2-4772-a8b2-731c99979afa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 472,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ee2c32e8-3ef1-49f9-a549-f3dfdb58a273",
          "title": "GET/Category by id",
          "fullFile": "C:\\Users\\User\\apiAutomationSanber\\test\\categories.js",
          "file": "\\test\\categories.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET/Category with valid id",
              "fullTitle": "GET/Category by id GET/Category with valid id",
              "timedOut": false,
              "duration": 201,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request(baseurl)\n.get('/categories/'+ forGet)\n.set( \"Authorization\", \"Bearer \" + token )\n.then(async(response) => {\n    expect((await response).status).to.equal(200)\n    expect((await response).body.status).to.equal(\"success\")\n    expect((await response).body.data.category.name).to.equal('Umum')\n})",
              "err": {},
              "uuid": "fca32b0e-f98d-491e-87d4-e4800632c96f",
              "parentUUID": "ee2c32e8-3ef1-49f9-a549-f3dfdb58a273",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET/Category with invalid id",
              "fullTitle": "GET/Category by id GET/Category with invalid id",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request(baseurl)\n.get('/categories/cd866e23-dc7f-4b2d-be0f-345e6ba23b0')\n.set( \"Authorization\", \"Bearer \" + token )\n.then(async(response) => {\n    expect((await response).status).to.equal(404)\n    expect((await response).body.status).to.equal(\"fail\")\n    expect((await response).body.message).to.equal(\"id tidak valid\")\n})",
              "err": {},
              "uuid": "a892f520-b372-4999-80f2-6cb838fea0c1",
              "parentUUID": "ee2c32e8-3ef1-49f9-a549-f3dfdb58a273",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fca32b0e-f98d-491e-87d4-e4800632c96f",
            "a892f520-b372-4999-80f2-6cb838fea0c1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 419,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1d2b8a21-ab25-46a1-9b21-a4c666c20f64",
          "title": "PUT/Category",
          "fullFile": "C:\\Users\\User\\apiAutomationSanber\\test\\categories.js",
          "file": "\\test\\categories.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "PUT/Category with valid data",
              "fullTitle": "PUT/Category PUT/Category with valid data",
              "timedOut": false,
              "duration": 159,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request(baseurl)\n.put('/categories/'+ forPut)\n.set( \"Authorization\", \"Bearer \" + token )\n.send({\n    \"name\": \"test update\",\n    \"description\": \"test update\"\n})\n.then(async(response) => {\n    expect((await response).status).to.equal(200)\n    expect((await response).body.status).to.equal(\"success\")\n    expect((await response).body.data.name).to.equal(\"test update\")\n})",
              "err": {},
              "uuid": "15d5d2b5-f786-47c8-894a-612691b3d290",
              "parentUUID": "1d2b8a21-ab25-46a1-9b21-a4c666c20f64",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT/Category with invalid token",
              "fullTitle": "PUT/Category PUT/Category with invalid token",
              "timedOut": false,
              "duration": 118,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request(baseurl)\n.put('/categories/'+ forPut)\n.set( \"Authorization\", \"Bearer \" + invalidToken )\n.send(invalidData)\n.then(async(response) => {\n    expect((await response).status).to.equal(401)\n    expect((await response).body.error).to.equal(\"Unauthorized\")\n    expect((await response).body.message).to.equal(\"Invalid token structure\")\n})",
              "err": {},
              "uuid": "5bfbbf1d-496a-4223-9e4a-c1a11fb5a621",
              "parentUUID": "1d2b8a21-ab25-46a1-9b21-a4c666c20f64",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "15d5d2b5-f786-47c8-894a-612691b3d290",
            "5bfbbf1d-496a-4223-9e4a-c1a11fb5a621"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 277,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9c46e773-0e80-4a1c-be98-48afb42c847e",
          "title": "DELETE/Category",
          "fullFile": "C:\\Users\\User\\apiAutomationSanber\\test\\categories.js",
          "file": "\\test\\categories.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "DELETE/Category with valid id",
              "fullTitle": "DELETE/Category DELETE/Category with valid id",
              "timedOut": false,
              "duration": 530,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request(baseurl)\n.get('/categories/'+ forDelete)\n.set( \"Authorization\", \"Bearer \" + token )\n.then(async(response) => {\n    expect((await response).status).to.equal(200)\n    expect((await response).body.status).to.equal(\"success\")\n    expect((await response).body.data).to.be.an('object')\n})",
              "err": {},
              "uuid": "e630a417-0434-4b69-9b29-353803392b54",
              "parentUUID": "9c46e773-0e80-4a1c-be98-48afb42c847e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE/Category with invalid id",
              "fullTitle": "DELETE/Category DELETE/Category with invalid id",
              "timedOut": false,
              "duration": 183,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request(baseurl)\n.get('/categories/cd866e23-dc7f-4b2d-be0f-345e6ba23b')\n.set( \"Authorization\", \"Bearer \" + token )\n.then(async(response) => {\n    expect((await response).status).to.equal(404)\n    expect((await response).body.status).to.equal(\"fail\")\n    expect((await response).body.message).to.equal(\"id tidak valid\")\n})",
              "err": {},
              "uuid": "d8136e60-8e27-4fd2-907e-ffea462a65f4",
              "parentUUID": "9c46e773-0e80-4a1c-be98-48afb42c847e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e630a417-0434-4b69-9b29-353803392b54",
            "d8136e60-8e27-4fd2-907e-ffea462a65f4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 713,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}